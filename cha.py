import streamlit as st
from dotenv import load_dotenv
import pickle
from PyPDF2 import PdfReader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.vectorstores import FAISS
from langchain.llms import OpenAI
from langchain.chains.question_answering import load_qa_chain
from langchain.callbacks import get_openai_callback
import os
from langchain.chat_models import ChatOpenAI
from langchain.chains import ConversationChain
from langchain.chains.conversation.memory import ConversationBufferWindowMemory
from langchain.prompts import (
    SystemMessagePromptTemplate,
    HumanMessagePromptTemplate,
    ChatPromptTemplate,
    MessagesPlaceholder
)
from streamlit_chat import message  # Importez la fonction message
import toml
import docx2txt
from langchain.memory.chat_message_histories import StreamlitChatMessageHistory
from langchain.callbacks.base import BaseCallbackHandler
if 'previous_question' not in st.session_state:
    st.session_state.previous_question = []
st.markdown(
    """
    <style>

        .user-message {
            text-align: left;
            background-color: #E8F0FF;
            padding: 8px;
            border-radius: 15px 15px 15px 0;
            margin: 4px 0;
            margin-left: 10px;
            margin-right: -40px;
            color:black;
        }

        .assistant-message {
            text-align: left;
            background-color: #F0F0F0;
            padding: 8px;
            border-radius: 15px 15px 15px 0;
            margin: 4px 0;
            margin-left: -10px;
            margin-right: 10px;
            color:black;
        }

        .message-container {
            display: flex;
            align-items: center;
        }

        .message-avatar {
            font-size: 25px;
            margin-right: 20px;
            flex-shrink: 0; /* Emp√™cher l'avatar de r√©tr√©cir */
            display: inline-block;
            vertical-align: middle;
        }

        .message-content {
            flex-grow: 1; /* Permettre au message de prendre tout l'espace disponible */
            display: inline-block; /* Ajout de cette propri√©t√© */
}
        .message-container.user {
            justify-content: flex-end; /* Aligner √† gauche pour l'utilisateur */
        }

        .message-container.assistant {
            justify-content: flex-start; /* Aligner √† droite pour l'assistant */
        }
    </style>
    """,
    unsafe_allow_html=True
)

# Sidebar contents
textcontainer = st.container()
with textcontainer:
    logo_path = "medi.png"
    logoo_path = "NOTEPRESENTATION.png"
    st.sidebar.image(logo_path,width=150)
   
    
st.sidebar.subheader("Suggestions:")
questions = [
        "Comment le gouvernement pr√©voit-il de g√©rer les impacts √©conomiques du changement climatique, notamment en termes de s√©curit√© hydrique et √©nerg√©tique ?",
        "Donnez-moi un r√©sum√© du rapport ",
        "Quels sont les principaux d√©fis auxquels le Maroc doit faire face pour atteindre ses objectifs de d√©veloppement durable ?",
        "Comment le Maroc a-t-il r√©ussi √† maintenir la croissance √©conomique malgr√© les d√©fis mondiaux, tels que les tensions g√©opolitiques et les crises climatiques ?",
        "Quelles sont les principales priorit√©s √©conomiques du gouvernement pour 2025 ?"
       
    ]    
 
load_dotenv(st.secrets["OPENAI_API_KEY"])
conversation_history = StreamlitChatMessageHistory()

def main():
    conversation_history = StreamlitChatMessageHistory()  # Cr√©ez l'instance pour l'historique
    st.header("Projet de Loi de Finances pour l‚Äôann√©e budg√©taire 2025: Rapport √©conomique et financier üí¨")
    
    # Load the document
    docx = 'Rapport economique financier.docx'
    
    if docx is not None:
        text = docx2txt.process(docx)
        text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=1000,
            chunk_overlap=200,
            length_function=len
        )
        chunks = text_splitter.split_text(text=text)

        embeddings = OpenAIEmbeddings()
        VectorStore = FAISS.from_texts(chunks, embedding=embeddings)
        with open("aaa.pkl", "wb") as f:
            pickle.dump(VectorStore, f)

        st.markdown('<p style="margin-bottom: 0;"><h7><b>Posez vos questions ci-dessous:</b></h7></p>', unsafe_allow_html=True)

        query_input = st.text_input("")
        selected_questions = st.sidebar.radio("****Choisir :****", questions)
        
        # Initialize query
        query = ""
        
        if query_input and query_input not in st.session_state.previous_question:
            query = query_input
            st.session_state.previous_question.append(query_input)
        elif selected_questions:
            query = selected_questions
        
        if query:
            docs = VectorStore.similarity_search(query=query, k=3)

            llm = OpenAI(model="gpt-3.5-turbo-instruct")
            chain = load_qa_chain(llm=llm, chain_type="stuff")
            with get_openai_callback() as cb:
                response = chain.run(input_documents=docs, question=query)
                
                if "Donnez-moi un r√©sum√© du rapport" in query:
                    response = "Le rapport du Projet de Loi de Finances 2025 met en avant la r√©silience de l'√©conomie marocaine dans un contexte mondial marqu√© par des incertitudes persistantes, telles que les tensions g√©opolitiques et les d√©fis climatiques. Il souligne les efforts du gouvernement pour consolider les acquis des 25 derni√®res ann√©es de r√©formes, tout en s'attaquant aux enjeux actuels, notamment en mati√®re d'emploi, d'√©ducation, de protection sociale, ainsi que de s√©curit√© hydrique et √©nerg√©tique. Malgr√© les d√©fis √©conomiques mondiaux, le Maroc continue de b√©n√©ficier de la croissance de secteurs cl√©s tels que l'automobile, l'a√©ronautique et le tourisme. Le rapport insiste sur l'importance de la poursuite des r√©formes structurelles, de la transition num√©rique et verte, tout en garantissant la soutenabilit√© des finances publiques par l'augmentation des recettes et la ma√Ætrise des d√©penses."
                conversation_history.add_user_message(query)
                conversation_history.add_ai_message(response)

            formatted_messages = []
            for msg in conversation_history.messages:
                role = "user" if msg.type == "human" else "assistant"
                avatar = "üßë" if role == "user" else "ü§ñ"
                css_class = "user-message" if role == "user" else "assistant-message"
                
                message_div = f'<div class="{css_class}">{msg.content}</div>'
                avatar_div = f'<div class="avatar">{avatar}</div>'
                
                if role == "user":
                    formatted_message = f'<div class="message-container user"><div class="message-avatar">{avatar_div}</div><div class="message-content">{message_div}</div></div>'
                else:
                    formatted_message = f'<div class="message-container assistant"><div class="message-content">{message_div}</div><div class="message-avatar">{avatar_div}</div></div>'
                
                formatted_messages.append(formatted_message)

            messages_html = "\n".join(formatted_messages)
            st.markdown(messages_html, unsafe_allow_html=True)

if __name__ == '__main__':
    main()
